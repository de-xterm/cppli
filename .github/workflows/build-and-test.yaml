name: build and test a single cmake target

on:
  workflow_call:
    inputs:
      test-name-suffix:
        required: false
        default: ''
        type: string
      
env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ github.token }}      
  
jobs:
  build-and-test:
      strategy:
        matrix:
          compiler: [gcc, clang, msvc]
          os: [ubuntu-latest, macos-latest, windows-latest]
          exclude:
          - os: windows-latest
            compiler: gcc

          - os: windows-latest
            compiler: clang

          - os: ubuntu-latest
            compiler: msvc

          - os: macos-latest
            compiler: msvc

      # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
      # You can convert this to a matrix build if you need cross-platform coverage.
      # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      runs-on: ${{matrix.os}}

      steps:
      - name: Restore cached build files 
        id: cache-build-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{github.workspace}}
          key: ${{matrix.os}}-${{matrix.compiler}}-build${{inputs.test-name-suffix}}

      - uses: actions/checkout@v3
        with:
          ref: 'main'
          submodules: 'recursive'        
          clean: false

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3    


      - name: if windows, setup MSVC
        if: ${{matrix.compiler == 'msvc'}}
        uses: ilammy/msvc-dev-cmd@v1

      - name: if apple and gcc, setup gcc
        if: ${{(matrix.os == 'macos-latest') && (matrix.compiler == 'gcc')}}
        run: |
          brew install gcc
          brew info gcc

          version=$(ls -v /usr/local/Cellar/gcc/ | tail -n 1)
          
          gcc_with_version_major=$(ls -v /usr/local/Cellar/gcc/${version}/bin/gcc-[0-9]* | tail -n 1)
          gxx_with_version_major=$(ls -v /usr/local/Cellar/gcc/${version}/bin/g++-[0-9]* | tail -n 1)

          ln -svf ${gcc_with_version_major} /usr/local/bin/gcc
          ln -svf ${gxx_with_version_major} /usr/local/bin/g++

          echo "/usr/local/bin" >> $GITHUB_PATH # so that the real gcc is found before the clang alias in /usr/bin


      - name: Configure CMake
        shell: bash
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        if: ${{((matrix.os != 'windows-latest'))}}
        run: |
          echo "Could not restore cache; rerunning cmake configuration"
          echo "path: $PATH"
          actual_compiler_name=$(echo $(echo ${{matrix.compiler}} | sed -r 's/clang+/clang++/g') | sed -r 's/gcc+/g++/g') # replace gcc with g++ and clang with clang++ (because using the github api to delete a cache doesn't seem to work when the key contains a plus) 
          echo ${actual_compiler_name}
          echo ${{matrix.os}}
          cmake --log-level=VERBOSE -DCMAKE_C_COMPILER=${{matrix.compiler}} -DCMAKE_CXX_COMPILER=${actual_compiler_name} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Ninja"

      - name: Configure CMake (windows only)
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        if: ${{((matrix.os == 'windows-latest'))}}
        run: |
          echo "Could not restore cache; rerunning cmake configuration"
          echo ${{matrix.os}}
          cmake --log-level=VERBOSE -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Ninja"

      - name: Build
        # Build your program with the given configuration
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target cppli testexe${{inputs.test-name-suffix}}

      - name: delete old cache
        shell: bash

        run: |
          curl -L \
          -X DELETE \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          https://api.github.com/repos/original-picture/cppli/actions/caches?key=${{matrix.os}}-${{matrix.compiler}}-build${{inputs.test-name-suffix}}

      - name: Save build files to cache
        id: cache-build-save
        uses: actions/cache/save@v3
        with:
          path: ${{github.workspace}}
          key: ${{matrix.os}}-${{matrix.compiler}}-build${{inputs.test-name-suffix}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV --output-on-failure -C ${{env.BUILD_TYPE}} -R '^Test${{inputs.test-name-suffix}}$'


